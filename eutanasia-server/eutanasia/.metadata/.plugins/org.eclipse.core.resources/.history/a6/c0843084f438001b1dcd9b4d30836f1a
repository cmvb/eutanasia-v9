package com.eutanasia.eutanasia.dao.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.eutanasia.eutanasia.dao.AbstractDao;
import com.eutanasia.eutanasia.dao.IPostsDao;
import com.eutanasia.eutanasia.model.MeGustaTB;
import com.eutanasia.eutanasia.model.PostTB;
import com.eutanasia.eutanasia.util.ConstantesValidaciones;

@Repository
public class MeGustaDaoImpl extends AbstractDao<MeGustaTB> implements IPostsDao {

	@PersistenceContext(unitName = "default")
	private EntityManager em;

	@Autowired
	private IPostsDao iPostDao;

	@Override
	public List<PostTB> consultarPostsPopulares() {
		List<PostTB> result = new ArrayList<>();
		
		// PARAMETROS
		Map<String, Object> pamameters = new HashMap<>();

		// QUERY
		StringBuilder JPQL = new StringBuilder("SELECT t FROM MeGustaTB t WHERE 1 = 1 ");
		// WHERE

		// Q. Order By
		JPQL.append(" ORDER BY t.id");
		// END QUERY

		TypedQuery<MeGustaTB> query = em.createQuery(JPQL.toString(), MeGustaTB.class);
		pamameters.forEach((k, v) -> query.setParameter(k, v));

		List<MeGustaTB> listaMeGusta = query.getResultList();
		Map<Long, List<MeGustaTB>> mapaPostMeGusta = new HashMap<>();
		for (MeGustaTB meGusta : listaMeGusta) {
			if (mapaPostMeGusta.isEmpty()) {
				List<MeGustaTB> listaTempMG = new ArrayList<>();
				listaTempMG.add(meGusta);
				mapaPostMeGusta.put(meGusta.getPostTB().getId(), listaTempMG);
			} else {
				if (mapaPostMeGusta.containsKey(meGusta.getPostTB().getId())) {
					mapaPostMeGusta.get(meGusta.getPostTB().getId()).add(meGusta);
				} else {
					List<MeGustaTB> listaTempMG = new ArrayList<>();
					listaTempMG.add(meGusta);
					mapaPostMeGusta.put(meGusta.getPostTB().getId(), listaTempMG);
				}
			}
		}
		
		for(long idPost : mapaPostMeGusta.keySet()) {
			if() {
				
			} else {
				
			}			
		}
		
		// Agregar otros post sin puntuaciones
		List<PostTB> listaTempPost = iPostDao.consultarPosts();
		for(PostTB postTemp : listaTempPost) {
			if(!mapaPostMeGusta.containsKey(postTemp.getId())) {
				
			}
		}

		return query.getResultList();
	}

	@Override
	public MeGustaTB crearMeGusta(MeGustaTB meGusta) {
		meGusta = colocarValoresDefecto(meGusta, ConstantesValidaciones.PHASE_CREATE);
		super.create(meGusta);
		return meGusta;
	}

	@Override
	public MeGustaTB modificarMeGusta(MeGustaTB meGusta) {
		meGusta = colocarValoresDefecto(meGusta, ConstantesValidaciones.PHASE_UPDATE);
		super.update(meGusta);
		return meGusta;
	}

	@Override
	public void eliminarPost(long idMeGusta) {
		super.deleteById(idMeGusta);
	}

	private PostTB colocarValoresDefecto(MeGustaTB meGusta, String fase) {
		if (ConstantesValidaciones.PHASE_CREATE.equalsIgnoreCase(fase)) {
			meGusta.setFechaCreacion(new Date());
			meGusta.setUsuarioCreacion("SYSTEM");
		}
		meGusta.setFechaActualizacion(new Date());
		meGusta.setUsuarioActualizacion("SYSTEM");
		return meGusta;
	}

}
