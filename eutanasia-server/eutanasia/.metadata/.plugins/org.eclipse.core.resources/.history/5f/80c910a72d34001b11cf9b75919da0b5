package com.eutanasia.eutanasia.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang3.StringUtils;
import org.json.JSONException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.eutanasia.eutanasia.dto.CategoriasDTO;
import com.eutanasia.eutanasia.dto.MailDTO;
import com.eutanasia.eutanasia.enums.EEstado;
import com.eutanasia.eutanasia.exception.ModelNotFoundException;
import com.eutanasia.eutanasia.model.ComentarioTB;
import com.eutanasia.eutanasia.model.PostTB;
import com.eutanasia.eutanasia.model.ToqueTB;
import com.eutanasia.eutanasia.model.UsuarioAutorTB;
import com.eutanasia.eutanasia.service.IEutanasiaService;
import com.eutanasia.eutanasia.util.ConstantesTablasNombre;
import com.eutanasia.eutanasia.util.ConstantesValidaciones;
import com.eutanasia.eutanasia.util.PropertiesUtil;
import com.eutanasia.eutanasia.util.Util;
import com.eutanasia.eutanasia.util.UtilMail;

@RestController
@RequestMapping("/eutanasia/paratodos")
public class ControladorRestEutanasia {

	@Value("${email.servidor}")
	private String EMAIL_SERVIDOR;

	@Value("${ruta.verificar.cuenta.nueva}")
	private String URL_VERIFICAR_CUENTA_NUEVA;

	@Autowired
	private UtilMail mailUtil;

	@Autowired
	private IEutanasiaService eutanasiaService;

	// Consultar

	@GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
	@RequestMapping("/consultarToques")
	public ResponseEntity<List<ToqueTB>> consultarToques() {
		try {
			List<ToqueTB> listaToques = eutanasiaService.consultarToques();
			return new ResponseEntity<List<ToqueTB>>(listaToques, HttpStatus.OK);
		} catch (JSONException e) {
			throw new ModelNotFoundException(e.getMessage());
		}
	}

	@GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
	@RequestMapping("/consultarTags")
	public ResponseEntity<List<String>> consultarTags() {
		try {
			List<String> listaTags = new ArrayList<>();
			List<PostTB> listaPosts = eutanasiaService.consultarPosts();
			if (listaPosts != null && !listaPosts.isEmpty()) {
				Set<String> tempListsetTags = new HashSet<>();
				for (PostTB post : listaPosts) {
					if (!StringUtils.isBlank(post.getTags())) {
						String[] vectorTags = post.getTags().split(ConstantesValidaciones.SEPARADOR_TAGS);
						for (String tag : vectorTags) {
							if (!tempListsetTags.contains(tag)) {
								tempListsetTags.add(tag);
							}
						}
					}
				}
				listaTags.addAll(tempListsetTags);
			}
			return new ResponseEntity<List<String>>(listaTags, HttpStatus.OK);
		} catch (JSONException e) {
			throw new ModelNotFoundException(e.getMessage());
		}
	}

	@GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
	@RequestMapping("/consultarContadorCategoriasPosts")
	public ResponseEntity<CategoriasDTO> consultarContadorCategoriasPosts() {
		try {
			CategoriasDTO contadorCategoriasDto = eutanasiaService.consultarContadorCategoriasPosts();
			return new ResponseEntity<CategoriasDTO>(contadorCategoriasDto, HttpStatus.OK);
		} catch (JSONException e) {
			throw new ModelNotFoundException(e.getMessage());
		}
	}

	@GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
	@RequestMapping("/consultarPosts")
	public ResponseEntity<List<PostTB>> consultarPosts() {
		try {
			List<PostTB> listaPosts = eutanasiaService.consultarPosts();
			return new ResponseEntity<List<PostTB>>(listaPosts, HttpStatus.OK);
		} catch (JSONException e) {
			throw new ModelNotFoundException(e.getMessage());
		}
	}

	@PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	@RequestMapping("/consultarPostsPorFiltros")
	public ResponseEntity<List<PostTB>> consultarPostsPorFiltros(PostTB filtroPost) {
		try {
			List<PostTB> listaPosts = eutanasiaService.consultarPostsPorFiltros(filtroPost);
			return new ResponseEntity<List<PostTB>>(listaPosts, HttpStatus.OK);
		} catch (JSONException e) {
			throw new ModelNotFoundException(e.getMessage());
		}
	}

	@PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	@RequestMapping("/consultarComentariosPorIdPost")
	public ResponseEntity<List<ComentarioTB>> consultarComentariosPorIdPost(@RequestBody PostTB post) {
		try {
			List<ComentarioTB> listaComentarios = new ArrayList<>();
			if (post != null) {
				listaComentarios = eutanasiaService.consultarComentariosPorIdPost(post.getId());
			}

			return new ResponseEntity<List<ComentarioTB>>(listaComentarios, HttpStatus.OK);
		} catch (JSONException e) {
			throw new ModelNotFoundException(e.getMessage());
		}
	}

	@PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	@RequestMapping("/loginUsuario")
	public ResponseEntity<UsuarioAutorTB> loginUsuario(@RequestBody UsuarioAutorTB usuarioAutor) {
		try {
			UsuarioAutorTB usuarioLogueado = null;
			if (usuarioAutor != null && !StringUtils.isBlank(usuarioAutor.getUsuario())
					&& !StringUtils.isBlank(usuarioAutor.getPassword())) {
				usuarioLogueado = eutanasiaService.loginUsuario(usuarioAutor.getUsuario(), usuarioAutor.getPassword());
				if (usuarioLogueado == null) {
					throw new ModelNotFoundException(
							ConstantesValidaciones.ERROR_LOGIN_DATOS_INCORRECTOS_INACTIVOS.toString());
				}
			} else {
				throw new ModelNotFoundException(ConstantesValidaciones.ERROR_LOGIN_DATOS_INSUFICIENTES);
			}

			return new ResponseEntity<UsuarioAutorTB>(usuarioLogueado, HttpStatus.OK);
		} catch (JSONException e) {
			throw new ModelNotFoundException(e.getMessage());
		}
	}

	// Crear

	@PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	@RequestMapping("/crearPost")
	public ResponseEntity<PostTB> crearPost(@RequestBody PostTB post) {
		try {
			List<String> errores = Util.validaDatos(ConstantesTablasNombre.MRA_POST_TB, post);
			PostTB newPost = new PostTB();
			if (errores.isEmpty()) {
				newPost = eutanasiaService.crearPost(post);
			} else {
				StringBuilder mensajeErrores = new StringBuilder();

				for (String error : errores) {
					mensajeErrores.append(error);
				}

				throw new ModelNotFoundException(mensajeErrores.toString());
			}

			return new ResponseEntity<PostTB>(newPost, HttpStatus.OK);
		} catch (JSONException e) {
			throw new ModelNotFoundException(e.getMessage());
		}
	}

	@PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	@RequestMapping("/crearComentario")
	public ResponseEntity<ComentarioTB> crearComentario(@RequestBody ComentarioTB comentario) {
		try {
			List<String> errores = Util.validaDatos(ConstantesTablasNombre.MRA_COMENTARIO_TB, comentario);
			ComentarioTB newComentario = new ComentarioTB();
			if (errores.isEmpty()) {
				newComentario = eutanasiaService.crearComentario(comentario);
			} else {
				StringBuilder mensajeErrores = new StringBuilder();

				for (String error : errores) {
					mensajeErrores.append(error);
				}

				throw new ModelNotFoundException(mensajeErrores.toString());
			}

			return new ResponseEntity<ComentarioTB>(newComentario, HttpStatus.OK);
		} catch (JSONException e) {
			throw new ModelNotFoundException(e.getMessage());
		}
	}

	@PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	@RequestMapping("/crearUsuario")
	public ResponseEntity<UsuarioAutorTB> crearUsuario(@RequestBody UsuarioAutorTB usuarioAutor) {
		try {
			List<String> errores = Util.validaDatos(ConstantesTablasNombre.MRA_USUARIO_AUTOR_TB, usuarioAutor);
			// Filtrar por usuario
			UsuarioAutorTB filtroUsuario = new UsuarioAutorTB();
			filtroUsuario.setUsuario(usuarioAutor.getUsuario());
			List<UsuarioAutorTB> listaPorUsuario = eutanasiaService.consultarUsuariosPorFiltros(filtroUsuario);
			if (listaPorUsuario != null && !listaPorUsuario.isEmpty()) {
				errores.add(ConstantesValidaciones.MSG_USUARIO_REPETIDO);
			}

			// Filtrar por correo
			UsuarioAutorTB filtroCorreo = new UsuarioAutorTB();
			filtroCorreo.setCorreo(usuarioAutor.getCorreo());
			List<UsuarioAutorTB> listaPorCorreo = eutanasiaService.consultarUsuariosPorFiltros(filtroCorreo);
			if (listaPorUsuario != null && !listaPorUsuario.isEmpty()) {
				errores.add(ConstantesValidaciones.MSG_CORREO_REPETIDO);
			}

			UsuarioAutorTB newUsuario = new UsuarioAutorTB();
			if (errores.isEmpty()) {
				usuarioAutor.setEstado((short) EEstado.INACTIVO.ordinal());
				newUsuario = eutanasiaService.crearUsuario(usuarioAutor);
				if (newUsuario != null) {
					MailDTO mailDto = new MailDTO();
					mailDto.setFrom(EMAIL_SERVIDOR);
					mailDto.setTo(newUsuario.getCorreo());
					mailDto.setSubject("ACTIVACIÃ“N USUARIO NUEVO - EUTANASIA WEB PAGE");

					Map<String, Object> model = new HashMap<>();
					model.put("user", newUsuario.getUsuario());
					model.put("nombreCompleto", newUsuario.getNombres() + " " + newUsuario.getApellidos());
					model.put("email", newUsuario.getCorreo());
					model.put("resetUrl", URL_VERIFICAR_CUENTA_NUEVA + newUsuario.getUsuario());
					mailDto.setModel(model);

					mailUtil.sendMail(mailDto, ConstantesValidaciones.TEMPLATE_MAIL_ACTIVATE_USER);
				}
			} else {
				StringBuilder mensajeErrores = new StringBuilder();

				for (String error : errores) {
					mensajeErrores.append(error + "|");
				}

				throw new ModelNotFoundException(mensajeErrores.toString());
			}

			return new ResponseEntity<UsuarioAutorTB>(newUsuario, HttpStatus.OK);
		} catch (JSONException e) {
			throw new ModelNotFoundException(e.getMessage());
		}
	}

	// Modificar

	@PutMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	@RequestMapping("/modificarUsuario")
	public ResponseEntity<UsuarioAutorTB> modificarUsuario(@RequestBody UsuarioAutorTB usuarioAutor) {
		try {
			List<String> errores = Util.validaDatos(ConstantesTablasNombre.MRA_USUARIO_AUTOR_TB, usuarioAutor);
			// Filtrar por usuario
			UsuarioAutorTB filtroUsuario = new UsuarioAutorTB();
			filtroUsuario.setUsuario(usuarioAutor.getUsuario());
			filtroUsuario.setId(usuarioAutor.getId());
			List<UsuarioAutorTB> listaPorUsuario = eutanasiaService.consultarUsuariosPorFiltros(filtroUsuario);
			if (listaPorUsuario != null && !listaPorUsuario.isEmpty()) {
				errores.add(ConstantesValidaciones.MSG_USUARIO_REPETIDO);
			}

			// Filtrar por correo
			UsuarioAutorTB filtroCorreo = new UsuarioAutorTB();
			filtroCorreo.setCorreo(usuarioAutor.getCorreo());
			filtroCorreo.setId(usuarioAutor.getId());
			List<UsuarioAutorTB> listaPorCorreo = eutanasiaService.consultarUsuariosPorFiltros(filtroCorreo);
			if (listaPorUsuario != null && !listaPorUsuario.isEmpty()) {
				errores.add(ConstantesValidaciones.MSG_CORREO_REPETIDO);
			}

			UsuarioAutorTB newUsuario = new UsuarioAutorTB();
			if (errores.isEmpty()) {
				usuarioAutor.setEstado((short) EEstado.ACTIVO.ordinal());
				newUsuario = eutanasiaService.modificarUsuario(usuarioAutor);
			} else {
				StringBuilder mensajeErrores = new StringBuilder();
				String erroresTitle = PropertiesUtil.getProperty("eutanasia.msg.validate.erroresEncontrados");

				for (String error : errores) {
					mensajeErrores.append(error);
				}

				throw new ModelNotFoundException(erroresTitle + mensajeErrores);
			}

			return new ResponseEntity<UsuarioAutorTB>(newUsuario, HttpStatus.OK);
		} catch (JSONException e) {
			throw new ModelNotFoundException(e.getMessage());
		}
	}

	@PutMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	@RequestMapping("/modificarPost")
	public ResponseEntity<PostTB> modificarPost(@RequestBody PostTB post) {
		try {
			List<String> errores = Util.validaDatos(ConstantesTablasNombre.MRA_POST_TB, post);
			PostTB postNuevo = new PostTB();
			if (errores.isEmpty()) {
				postNuevo = new PostTB();
				postNuevo = eutanasiaService.modificarPost(post);
			} else {
				StringBuilder mensajeErrores = new StringBuilder();
				String erroresTitle = PropertiesUtil.getProperty("eutanasia.msg.validate.erroresEncontrados");

				for (String error : errores) {
					mensajeErrores.append(error);
				}

				throw new ModelNotFoundException(erroresTitle + mensajeErrores);
			}

			return new ResponseEntity<PostTB>(postNuevo, HttpStatus.OK);
		} catch (JSONException e) {
			throw new ModelNotFoundException(e.getMessage());
		}
	}

	@PutMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	@RequestMapping("/modificarComentario")
	public ResponseEntity<ComentarioTB> modificarComentario(@RequestBody ComentarioTB comentario) {
		try {
			List<String> errores = Util.validaDatos(ConstantesTablasNombre.MRA_COMENTARIO_TB, comentario);
			ComentarioTB comentarioNuevo = new ComentarioTB();
			if (errores.isEmpty()) {
				comentarioNuevo = new ComentarioTB();
				comentarioNuevo = eutanasiaService.modificarComentario(comentario);
			} else {
				StringBuilder mensajeErrores = new StringBuilder();
				String erroresTitle = PropertiesUtil.getProperty("eutanasia.msg.validate.erroresEncontrados");

				for (String error : errores) {
					mensajeErrores.append(error);
				}

				throw new ModelNotFoundException(erroresTitle + mensajeErrores);
			}

			return new ResponseEntity<ComentarioTB>(comentarioNuevo, HttpStatus.OK);
		} catch (JSONException e) {
			throw new ModelNotFoundException(e.getMessage());
		}
	}

	// Eliminar

	@PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
	@RequestMapping("/eliminarPost")
	public void eliminar(@RequestBody PostTB post) {
		try {
			if (post != null) {
				eutanasiaService.eliminarPost(post.getId());
			}
		} catch (JSONException e) {
			throw new ModelNotFoundException(e.getMessage());
		}
	}

	@PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
	@RequestMapping("/eliminarComentario")
	public void eliminar(@RequestBody ComentarioTB comentario) {
		try {
			if (comentario != null) {
				eutanasiaService.eliminarComentario(comentario.getId());
			}
		} catch (JSONException e) {
			throw new ModelNotFoundException(e.getMessage());
		}
	}

}
