package com.eutanasia.eutanasia.dao.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Repository;

import com.eutanasia.eutanasia.dao.AbstractDao;
import com.eutanasia.eutanasia.dao.IPostsDao;
import com.eutanasia.eutanasia.model.MeGustaTB;
import com.eutanasia.eutanasia.model.PostTB;
import com.eutanasia.eutanasia.util.ConstantesValidaciones;

@Repository
public class MeGustaDaoImpl extends AbstractDao<MeGustaTB> implements IPostsDao {

	@PersistenceContext(unitName = "default")
	private EntityManager em;

	@Override
	public List<PostTB> consultarPostsPopulares() {
		// PARAMETROS
		Map<String, Object> pamameters = new HashMap<>();

		// QUERY
		StringBuilder JPQL = new StringBuilder("SELECT t FROM MeGustaTB t WHERE 1 = 1 ");
		// WHERE
		if (filtroPost.getId() > 0) {
			JPQL.append(" AND t.postTB.id = :ID_POST ");
			pamameters.put("ID_POST", filtroPost.getId());
		}
		if (filtroPost.getUsuarioAutorTB() != null
				&& !StringUtils.isBlank(filtroPost.getUsuarioAutorTB().getNombres())) {
			JPQL.append(" AND UPPER(t.usuarioAutorTB.nombres) LIKE :AUTOR_POST ");
			pamameters.put("AUTOR_POST", ConstantesValidaciones.COMODIN_BD
					+ filtroPost.getUsuarioAutorTB().getNombres().toUpperCase() + ConstantesValidaciones.COMODIN_BD);
		}
		if (!StringUtils.isBlank(filtroPost.getTitulo())) {
			JPQL.append(" AND UPPER(t.titulo) LIKE :TITULO_POST ");
			pamameters.put("TITULO_POST", ConstantesValidaciones.COMODIN_BD + filtroPost.getTitulo().toUpperCase()
					+ ConstantesValidaciones.COMODIN_BD);
		}
		if (!StringUtils.isBlank(filtroPost.getSubtitulo())) {
			JPQL.append(" AND UPPER(t.titulo) LIKE :SUBTITULO_POST ");
			pamameters.put("SUBTITULO_POST", ConstantesValidaciones.COMODIN_BD + filtroPost.getSubtitulo().toUpperCase()
					+ ConstantesValidaciones.COMODIN_BD);
		}
		if (filtroPost.getCategoria() > 0) {
			JPQL.append(" AND t.categoria = :CATEGORIA_POST ");
			pamameters.put("CATEGORIA_POST", filtroPost.getCategoria());
		}
		if (filtroPost.getEstado() > 0) {
			JPQL.append(" AND t.estado = :ESTADO_POST ");
			pamameters.put("ESTADO_POST", filtroPost.getEstado());
		}
		if (!StringUtils.isBlank(filtroPost.getTags())) {
			JPQL.append(" AND UPPER(t.tags) LIKE :TAG_POST ");
			pamameters.put("TAG_POST", ConstantesValidaciones.COMODIN_BD + filtroPost.getTags().toUpperCase()
					+ ConstantesValidaciones.COMODIN_BD);
		}

		// Q. Order By
		JPQL.append(" ORDER BY t.id");
		// END QUERY

		TypedQuery<MeGustaTB> query = em.createQuery(JPQL.toString(), MeGustaTB.class);
		pamameters.forEach((k, v) -> query.setParameter(k, v));

		return query.getResultList();
	}

	@Override
	public MeGustaTB crearMeGusta(MeGustaTB meGusta) {
		meGusta = colocarValoresDefecto(meGusta, ConstantesValidaciones.PHASE_CREATE);
		super.create(meGusta);
		return meGusta;
	}

	@Override
	public MeGustaTB modificarMeGusta(MeGustaTB meGusta) {
		meGusta = colocarValoresDefecto(meGusta, ConstantesValidaciones.PHASE_UPDATE);
		super.update(meGusta);
		return meGusta;
	}

	@Override
	public void eliminarPost(long idMeGusta) {
		super.deleteById(idMeGusta);
	}

	private PostTB colocarValoresDefecto(MeGustaTB meGusta, String fase) {
		if (ConstantesValidaciones.PHASE_CREATE.equalsIgnoreCase(fase)) {
			meGusta.setFechaCreacion(new Date());
			meGusta.setUsuarioCreacion("SYSTEM");
		}
		meGusta.setFechaActualizacion(new Date());
		meGusta.setUsuarioActualizacion("SYSTEM");
		return meGusta;
	}

}
