package com.eutanasia.eutanasia.util;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang3.StringUtils;

import com.eutanasia.eutanasia.dto.ArchivoDTO;
import com.eutanasia.eutanasia.model.UsuarioAutorTB;

public abstract class Util {

	public static final Pattern EMAIL_PATTERN = Pattern
			.compile("^[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");
	public static final String VALOR_NULL_OBJETO = PropertiesUtil.getProperty("eutanasia.msg.validate.valor.objeto");
	public static final String VALOR_VACIO = PropertiesUtil.getProperty("eutanasia.msg.validate.valor.vacio");
	public static final String VALOR_INCORRECTO = PropertiesUtil.getProperty("eutanasia.msg.validate.valor.incorrecto");
	public static final String CORREO_NO_VALIDO = PropertiesUtil.getProperty("eutanasia.msg.validate.correoInvalido");
	public static final String TABLA_NO_ESTABLECIDA_VALIDACIONES = PropertiesUtil
			.getProperty("eutanasia.msg.validate.tabla.no.establecida");
	public static final String SUPERA_LONGITUD = PropertiesUtil
			.getProperty("eutanasia.msg.validate.valor.superaLongitud");
	public static final String RUTA_SFTP_IMAGES_USER = PropertiesUtil.getProperty("eutanasia.ruta.images.user");

	public static final String ARCHIVO = PropertiesUtil.getProperty("lbl.archivo.archivo");
	public static final String NOMBRE_ARCHIVO = PropertiesUtil.getProperty("lbl.archivo.nombre");
	public static final String RUTA_ARCHIVO = PropertiesUtil.getProperty("lbl.archivo.ruta");

	public static final String ARCHIVO = PropertiesUtil.getProperty("lbl.archivo.archivo");
	public static final String NOMBRES_USUARIO = PropertiesUtil.getProperty("lbl.archivo.nombre");
	public static final String APELLIDOS_USUARIO = PropertiesUtil.getProperty("lbl.archivo.ruta");

	public static final int MAX_LENGTH_50 = 50;
	public static final int MAX_LENGTH_30 = 30;

	public static boolean esCorreoValido(String email) {
		Matcher mather = EMAIL_PATTERN.matcher(email.toLowerCase());
		return mather.find();
	}

	public static boolean tieneCantidadCharPermitida(String cadenaValidar, int cantidadChar) {
		boolean result = false;
		if (!StringUtils.isBlank(cadenaValidar)) {
			result = cadenaValidar.length() <= cantidadChar;
		}
		return result;
	}

	public static List<String> validaDatos(String tabla, Object entidadTB) {
		List<String> errores = new ArrayList<>();
		// TODO CREAR VALIDACIONES FALTANTES
		if (!StringUtils.isBlank(tabla)) {
			switch (tabla) {
			case ConstantesTablasNombre.MRA_TOQUE_TB:
				break;
			case ConstantesTablasNombre.MRA_COMENTARIO_TB:
				break;
			case ConstantesTablasNombre.MRA_POST_TB:
				break;
			case ConstantesTablasNombre.MRA_USUARIO_AUTOR_TB:
				errores = validarUsuarioAutor((UsuarioAutorTB) entidadTB);
				break;
			}
		} else {
			errores.add(TABLA_NO_ESTABLECIDA_VALIDACIONES);
		}

		return errores;
	}

	public static List<String> validarUsuarioAutor(UsuarioAutorTB usuarioAutorTB) {
		List<String> errores = new ArrayList<>();

		if (StringUtils.isBlank(usuarioAutorTB.getNombres())) {
			errores.add(NOMBRES_USUARIO + VALOR_VACIO);
		}
		if (StringUtils.isBlank(usuarioAutorTB.getApellidos())) {
			errores.add(APELLIDOS_USUARIO + VALOR_VACIO);
		}
		if (StringUtils.isBlank(usuarioAutorTB.getResena())) {
			errores.add(RESENA_USUARIO + VALOR_VACIO);
		}
		if (StringUtils.isBlank(usuarioAutorTB.getUsuario())) {
			errores.add(USUARIO + VALOR_VACIO);
		}
		if (StringUtils.isBlank(usuarioAutorTB.getCorreo())) {
			errores.add(CORREO_USUARIO + VALOR_VACIO);
		}
		if (StringUtils.isBlank(usuarioAutorTB.getUrlImagen())) {
			errores.add(IMAGEN_USUARIO + VALOR_VACIO);
		}
		if (usuarioAutorTB.getFechaNacimiento() == null) {
			errores.add(FECHA_NACIMIENTO_USUARIO + VALOR_VACIO);
		} else if (usuarioAutorTB.getFechaNacimiento().after(new Date())) {
			errores.add(FECHA_NACIMIENTO_USUARIO + VALOR_INCORRECTO);
		}
		if (StringUtils.isBlank(usuarioAutorTB.getPassword())) {
			errores.add(CLAVE_USUARIO + VALOR_VACIO);
		}

		return errores;
	}

	public static List<String> validarArchivo(ArchivoDTO archivoDto) {
		List<String> errores = new ArrayList<>();

		if (archivoDto != null) {
			if (archivoDto.getArchivo() == null) {
				errores.add(ARCHIVO + VALOR_INCORRECTO);
			}
			if (StringUtils.isBlank(archivoDto.getNombreArchivo())) {
				errores.add(NOMBRE_ARCHIVO + VALOR_VACIO);
			}
			if (StringUtils.isBlank(archivoDto.getRutaArchivo())) {
				errores.add(RUTA_ARCHIVO + VALOR_VACIO);
			}
		} else {
			errores.add(VALOR_NULL_OBJETO);
		}

		return errores;
	}

}